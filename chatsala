#include <device.h>
#include <devicetree.h>
#include <drivers/gpio.h>
#include <sys/printk.h>
#include <sys/fifo.h>
#include <string.h>

#define TAMANHO_PILHA 1024 // define o tamanho da pilha para as threads

#define GPIO "GPIOB"
#define GPIO_TX 18 // PTB18 (pino GPIO de transmissão)
#define GPIO_RX 19 // PTB19 (pino GPIO de recepção)

K_FIFO_DEFINE(fifo_tx); // define e inicializa a fifo de transmissão

/* necessária para que os dados sejam organizados na FIFO corretamente */
struct byte {
    void *ex; /* ponteiro reservado para ser o primeiro campo da fifo,
                 para a fifo gerenciar os itens na fila */
    uint8_t dado; /* armazena um byte de dado que será transmitido */
}

const struct device *dispositivo_gpio; /* */
uint8_t n = 0; /* variável global - número de bytes da mensagem */

void start_gpio(void) 
{
    dispositivo_gpio = DEVICE_DT_GET(DT_NODELABEL(GPIOB));
    gpio_pin_configure(dispositivo_gpio, GPIO_TX, GPIO_OUTPUT_ACTIVE);
    gpio_pin_configure(dispositivo_gpio, GPIO_RX, GPIO_INPUT_ACTIVE);
}

void enviar_mensagem(uint8_t dado)
{
    for (int i = 0; i < 8; i++) {
        gpio_pin_set(dispositivo_gpio, GPIO_TX, (dado >> (7 - i)) & 0x01);
        k_sleep(K_MSEC(1));
    }
}

void teclado_thread(void)
{
    char tx_buf[8] = 0;
    struct byte *tx_dado; /* crio um ponteiro tx_dado que aponta
                             para uma estrutura do tipo byte */

    /* teclado, só pode escrever no máximo 7 caracteres */
    do {
            int i = 0;
            printk("Digite uma frase (de 0 a 7 caracteres) e pressione
            enter para enviar : ");
            tx_buf [i] = console_getchar();
            i++;

            if (strlen(tx_buf) > 7) {
                printk("ERRO!\n");
                while (console_getchar() != '\n') {
                } // zera o console
                for (int j = 0; j < strlen(tx_buf); j++) {
                    tx_buf[j] = 0;
                }   /* zera o buffer */
            } 
    } while (tx_buf[i-1] != '\n');

        n = strlen(tx_buf); /* guarda em n o tamanho da mensagem
                               para usar no cabeçalho */
        

        /* coloca na fifo a frase digitada */
        for (int i = 0; i < n; i++) { 
            uint8_t letra; 
            letra = tx_buf[i];
            struct byte *cara = k_malloc(sizeof(struct byte));
            if (cara != NULL) {
                cara->dado = letra;
                k_fifo_put(&fifo_tx, cara);
            }
            k_sleep(K_MSEC(100));
        }
}


void transmissao_thread(void)
{
    const uint8_t sync = 0x16; // Byte de sincronização
    const uint8_t STX = 0x55;  // Byte STX
    uint8_t cabecalho;         // Byte com ID (11010) e n
    const uint8_t end = 0x17;  // Byte end 
    struct byte *dado_fifo;

    while (1) {
        enviar_mensagem('U');   // Caractere 'U' (ASCII 85)
        enviar_mensagem(sync);  // Byte de sincronização
        enviar_mensagem(STX);   // Byte aleatório 1

        // Configura o byte de ID com o número de bytes
        cabecalho = (0x1A << 3) | n; // 11010 << 3 | n
        enviar_mensagem(ID);         // Byte com ID e n

        // Transmissão dos dados armazenados na FIFO
        for (uint8_t i = 0; i < n; i++) {
            dado_fifo = k_fifo_get(&fifo_tx, K_FOREVER);
            if (dado_fifo != NULL) {
                enviar_mensagem(dado_fifo->data);
                k_free(dado_fifo);
            }
        }

        enviar_mensagem(end);   // Byte de fim
        k_sleep(K_MSEC(1000));  // Atraso de 1 segundo entre transmissões
    }
}

K_THREAD_DEFINE(teclado_tid, TAMANHO_PILHA, teclado_thread, NULL, NULL, NULL, NULL, 0, 0);
K_THREAD_DEFINE(transmissao_tid, TAMANHO_PILHA, transmissao_thread, NULL, NULL, NULL, NULL, 0, 0);

void main(void)
{
    start_gpio();

    while (1) {
        k_sleep(K_SECONDS(10));
    }
}
        k_sleep(K_SECONDS(10));
    }
}
